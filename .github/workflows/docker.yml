name: Publish Docker Image
on:
  workflow_dispatch:
    inputs:
      include_386:
        description: '是否构建 386'
        required: false
        type: boolean
        default: false
      include_arm_v7:
        description: '是否构建 arm/v7'
        required: false
        type: boolean
        default: false
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'

concurrency: 
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build and Push ${{ matrix.platform }} Image
    runs-on: ubuntu-latest
    env:
      REGISTRY_IMAGE: lanyun/subconverter
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            platform_id: linux-amd64
          - platform: linux/arm64
            platform_id: linux-arm64
          - platform: linux/arm/v7
            platform_id: linux-arm-v7
            if: ${{ (inputs.include_arm_v7 || 'false') == 'true' }}
          - platform: linux/386
            platform_id: linux-386
            if: ${{ (inputs.include_386 || 'false') == 'true' }}
    steps:
      - name: Checkout base
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Remove header features
        run: bash scripts/remove_headers.sh
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get commit SHA
        if: github.ref == 'refs/heads/master'
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build & push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: scripts/
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SHA=${{ steps.vars.outputs.sha_short }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},name-canonical=true

      - name: Collect digest
        run: |
          rm -rf /tmp/digests
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          # echo "${digest#sha256:}" > /tmp/digests/digest-${{ matrix.platform_id }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ matrix.platform_id }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 3

  merge:
    name: Create and Push Multi-Arch Manifest
    needs: build
    runs-on: ubuntu-latest
    env:
      REGISTRY_IMAGE: lanyun/subconverter
    steps:
      - name: Download all digests
        uses: actions/download-artifact@v4
        with:
          pattern: digest-*
          path: /tmp/digests
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata (for tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Docker login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          # 创建版本标签的 manifest
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
          
          # 如果是 master 分支，额外创建 latest 标签
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:latest \
              $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
          fi

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}